なんかida_demoのデータが吹っ飛んでたので信用ならん。

4193a0 .. joygetpos0 -> joygetpos1 -> 成功でjoygetdevcaps , 失敗したら、"使えるjoypadがありません"
joygetdevcaps はここのみ、で、これが呼ばれたかのようにメモリを改変しよう。(再起動が面倒)

4193a0内::
呼び出し直前に、
push 0x004bdee0 してる。(pjc(devicedata)のアドレスとして)
*(*0x4be218 *8e + eax) の +0x58 , 0x5a , 0x5e  に従って dwButton のが選択されてる。
それとも、 1, 2, 8 かな。(まあ1bitずつたてればよさそう)

返り値、無事見つかれば0,だめっぽいなら1。だが、捨ててる。

joycaps structure , 2,2,32,4,4,4,4,で、
すくなくとも pjc+36 or pjc+40 はrefrされてる。
が、xrefがあんまないのが謎。

xrefないって言ってるのに、0x419410でxrefされてるので大嘘っぽい。
0x4194e1より、
8b 81 08 df 4b 00 で、
mov eax 0x004bdf08

0x004bdf08 - 0x004bdee0 == 0x28

joygetposのGOTは0x00495268

wndproc .. 0x420cf0 ただ、何の役にも立たない

0x4198a0のdecon

f(p,q){
	mc = dx
	m8 = ecx
	if(mc!=0)return 0;
	m4 = 1<<mc
	if (q&m4)m10 = 0;
	else m10 = p;

	return m14;

levelのデータ .. 
0x007338116
0x00734F360
0x00734F364
多分stack上。

表示には、
7338116 が level情報、
7338116 が scene情報
となってる。

で、level遷移時に、それぞれの選択されてるsceneが憶えられてて、
level6 が 734f948,c
level2 が 734f5e8,c で、
1levelあたり 0xd8 == 216 byte が割り当てられてそう。
さらにそのあとに、(level2なら5e8+0x4) おそらくステージ数情報。


733周辺 .. level選択とかのデータ群。






0x00734F360
0x00734F364
スタート画面でのカーソル位置も。


http://wisdom.sakura.ne.jp/system/winapi/win32/win46.html
デッドタイムなる技術があるそう。
おそらく0x42044fからのがデッドタイムに本ゲーム処理をするっぽい。

0x439200
場面遷移かな？(case的なのが見える)
それとも、soundについての設定とかっぽい。
引数のecx が ebp+var_54 に入り、
それが指す構造体の値(もしくはポインタかな)が基準になってる。
unk_4C4EE8 ですな。
で、*0x4c4ee8 


0x423e70 .. なんかの初期化っぽい。
title/th08logo.jpg とか 
nowloading.anm とかの文字が見える。
.anm .. アニメーション、らしい。
0x443070 .. アニメーションのデコード
0x4435A0 .. アニメが読み込めませんとか、テクスチャが違いますとか。

0x41a960 .. loadとかdecodeとか見えてて、多分データをロードしてるんでしょうな。ふふふ。

sub0x423d60 .. now_loading のアニメ処理、的なの


0x421c90 .. ecx に、 おそらくなにかの構造体が渡されて、
0x11dc + ecx から、クラスの配列があり、

for(int i=0;i<0x20;i++){
	p* = ecx
	d = ecx.some[i]
	c = *d
	push d
	call *(c+8) みたいなのが行われてる。
	つまり、dはおそらくthisポインタで、
	d+8のメゾットが呼ばれてそう。
	仮想関数というやつだそうな

0x4ca1b8 が引数で毎回呼ばれてる。
なんでしょね。

0x441dc0 .. http://www.openrce.org/articles/full_view/23
で、
配列のnewをやってる。
で、それを0x4ca1b8 に入れてる。
*0x4ca1b8 .. おそらく、アニメ情報に関する構造体っぽい。
.anmとかがたくさんあった。
先頭あたり、なんか画面の表示速度？に合わせて量が変わっていた。
死ぬと固定される。

また、
0x4c4678 という、
おそらくグローバルなclassが毎回呼ばれてる。
class + 0x38 とか
class + 0xc とか の関数が。

今回は、663120 で、もろヒープ上ですねー。

*663120が、関数ポインタ群。
なにかの配列なのかも。

mainのアレは、
0x486c1c -> 42046f とか

0x486c21 が mainのやつのスタックに戻りeipで入ってるハズ
-> mainのやつのスタックの底から0x19c byte 上に入ってた。(0x18fe64 とか)

0x434a90 .. リプレイ情報を作るやつ。 makerepl (暗号化もされてる)
0x426bf0 .. まーた大量switchですね。
0x4c4e74 .. おそらく、現在のリプレイデータを作るための情報が入ってる。
で、makerepl(ecx .. *data,char* filename, inputecx) ; 的なの。

0x4c4e74* == addr
リプレイのためのデータを保存する構造体。
全部で0x24 byte.
addr     .. たいてい0,不明
addr+0x4 .. t95r 雪府「ダイアモンドブリザード」とかあり。スペル名かと。
addr+0x8 .. 参照先の+2 +3 がそれぞれlevel,scene , +7以降は、保存名。 +14がポイント。
addr+0xc .. 謎の <<<<<<<<
addr+0x10 .. 0padされた謎の空間。毎秒動いて、6byteごとに新領域を確保してる。
addr+0x14 .. 191937322 とかで、0xb70bb20 から始まる。1secで約2増える。
addr+0x18 .. たいてい0
addr+0x1c .. 経過時刻(1s==60)っぽい。
addr + 0x20 .. addr + 0x8 と同じとこを指してる。

0x434a90について
ebp+var130 .. 大構造体
ebp+var10 .. 小構造体
loc_434ACE .. 入力されたファイル名(.rpy)をebp+var_10の+7のとこに積んでいく。


0x4190b0 .. なんやねんこれ

0x417a70 .. bestshot を作ったりしている、かな。

*(*0x4ca2f0+0x4) .. ステージレベル情報、とか。

表示画面情報は、基本優先度低め、動的優先度高め、のDSoundを呼び出してるthreadのスタックにあった。
同じく、画面に出すポイントとか。
画面情報はここかな。

mainからの呼び出しは、
420474 -> call sub_420770
とか、 
420460 -> call dword ptr [[4c4678]+0xch]
とかによくなってる。

420474 -> 八割がたsleepについて。


ecx .. 02358f38


sub_417a70 .. また謎。なにかのメンバ関数、or コンストラクタっぽい。
データ製作、がたくさん並んでいる。
stagedata -> font -> 敵弾 -> 写真 -> 自機 -> 敵 -> pause -> bullet(LaserInf)
とまあ実に様々なデータの.anmの初期化をしている。
なんだろう、継承->継承->の連続、っぽい。

0x429c80 .. replaydata製作所っぽいぞ。
pause.anm の init 時 にいっしょに0x42a6e0のメンバ関数になってる。
replay画面のアレっぽい。
0x42a136 で、0x14個のfor文が回ってるのをみても、replay画面の描画的なのをやってそう。

0x4a9f80 .. 画面への文字描写に関わる重大ななにか


0x4452d0 .. 中でsqrtとかやってて過激。

sub_0x439200 .. soundのloadとか。

sub_420240 .. winmain.
